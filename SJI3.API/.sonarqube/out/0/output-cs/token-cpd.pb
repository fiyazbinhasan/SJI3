¾8
BC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Common\Domain\Enumeration.cs
	namespace 	
SJI3
 
. 
Core 
. 
Common 
. 
Domain !
;! "
public 
abstract 
class 
Enumeration !
:" #
IComparable$ /
{		 
public

 

string

 
Name

 
{

 
get

 
;

 
private

 %
set

& )
;

) *
}

+ ,
public 

int 
Id 
{ 
get 
; 
private  
set! $
;$ %
}& '
	protected 
Enumeration 
( 
int 
id  
,  !
string" (
name) -
)- .
=>/ 1
(2 3
Id3 5
,5 6
Name7 ;
); <
== >
(? @
id@ B
,B C
nameD H
)H I
;I J
public 

override 
string 
ToString #
(# $
)$ %
=>& (
Name) -
;- .
public 

static 
IEnumerable 
< 
T 
>  
GetAll! '
<' (
T( )
>) *
(* +
)+ ,
where- 2
T3 4
:5 6
Enumeration7 B
=>C E
typeof 
( 
T 
) 
. 
	GetFields 
( 
BindingFlags (
.( )
Public) /
|0 1
BindingFlags (
.( )
Static) /
|0 1
BindingFlags (
.( )
DeclaredOnly) 5
)5 6
. 
Select 
( 
f 
=> 
f 
. 
GetValue #
(# $
null$ (
)( )
)) *
. 
Cast 
< 
T 
> 
( 
) 
; 
public 

override 
bool 
Equals 
(  
object  &
obj' *
)* +
{ 
if 

( 
obj 
is 
not 
Enumeration "

otherValue# -
)- .
{ 	
return 
false 
; 
} 	
var   
typeMatches   
=   
GetType   !
(  ! "
)  " #
==  $ &
obj  ' *
.  * +
GetType  + 2
(  2 3
)  3 4
;  4 5
var!! 
valueMatches!! 
=!! 
Id!! 
.!! 
Equals!! $
(!!$ %

otherValue!!% /
.!!/ 0
Id!!0 2
)!!2 3
;!!3 4
return## 
typeMatches## 
&&## 
valueMatches## *
;##* +
}$$ 
public&& 

override&& 
int&& 
GetHashCode&& #
(&&# $
)&&$ %
=>&&& (
Id&&) +
.&&+ ,
GetHashCode&&, 7
(&&7 8
)&&8 9
;&&9 :
public(( 

static(( 
int(( 
AbsoluteDifference(( (
(((( )
Enumeration(() 4

firstValue((5 ?
,((? @
Enumeration((A L
secondValue((M X
)((X Y
{)) 
var** 
absoluteDifference** 
=**  
Math**! %
.**% &
Abs**& )
(**) *

firstValue*** 4
.**4 5
Id**5 7
-**8 9
secondValue**: E
.**E F
Id**F H
)**H I
;**I J
return++ 
absoluteDifference++ !
;++! "
},, 
public.. 

static.. 
T.. 
	FromValue.. 
<.. 
T.. 
>..  
(..  !
int..! $
value..% *
)..* +
where.., 1
T..2 3
:..4 5
Enumeration..6 A
{// 
var00 
matchingItem00 
=00 
Parse00  
<00  !
T00! "
,00" #
int00$ '
>00' (
(00( )
value00) .
,00. /
$str000 7
,007 8
item009 =
=>00> @
item00A E
.00E F
Id00F H
==00I K
value00L Q
)00Q R
;00R S
return11 
matchingItem11 
;11 
}22 
public44 

static44 
T44 
FromDisplayName44 #
<44# $
T44$ %
>44% &
(44& '
string44' -
displayName44. 9
)449 :
where44; @
T44A B
:44C D
Enumeration44E P
{55 
var66 
matchingItem66 
=66 
Parse66  
<66  !
T66! "
,66" #
string66$ *
>66* +
(66+ ,
displayName66, 7
,667 8
$str669 G
,66G H
item66I M
=>66N P
item66Q U
.66U V
Name66V Z
==66[ ]
displayName66^ i
)66i j
;66j k
return77 
matchingItem77 
;77 
}88 
private:: 
static:: 
T:: 
Parse:: 
<:: 
T:: 
,:: 
TK::  
>::  !
(::! "
TK::" $
value::% *
,::* +
string::, 2
description::3 >
,::> ?
Func::@ D
<::D E
T::E F
,::F G
bool::H L
>::L M
	predicate::N W
)::W X
where::Y ^
T::_ `
:::a b
Enumeration::c n
{;; 
var<< 
matchingItem<< 
=<< 
GetAll<< !
<<<! "
T<<" #
><<# $
(<<$ %
)<<% &
.<<& '
FirstOrDefault<<' 5
(<<5 6
	predicate<<6 ?
)<<? @
;<<@ A
if>> 

(>> 
matchingItem>> 
==>> 
null>>  
)>>  !
throw?? 
new?? %
InvalidOperationException?? /
(??/ 0
$"??0 2
$str??2 3
{??3 4
value??4 9
}??9 :
$str??: K
{??K L
description??L W
}??W X
$str??X \
{??\ ]
typeof??] c
(??c d
T??d e
)??e f
}??f g
"??g h
)??h i
;??i j
returnAA 
matchingItemAA 
;AA 
}BB 
publicDD 

intDD 
	CompareToDD 
(DD 
objectDD 
objDD  #
)DD# $
=>DD% '
IdDD( *
.DD* +
	CompareToDD+ 4
(DD4 5
(DD5 6
(DD6 7
EnumerationDD7 B
)DDB C
objDDC F
)DDF G
.DDG H
IdDDH J
)DDJ K
;DDK L
}EE Å
EC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Common\Domain\IAggregateRoot.cs
	namespace 	
SJI3
 
. 
Core 
. 
Common 
. 
Domain !
;! "
public 
	interface 
IAggregateRoot 
{ 
} È
=C:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Common\Domain\IAudit.cs
	namespace 	
SJI3
 
. 
Core 
. 
Common 
. 
Domain !
;! "
public 
	interface 
IAudit 
{ 
DateTimeOffset 
	CreatedOn 
{ 
get "
;" #
}$ %
DateTimeOffset 
? 

ModifiedOn 
{  
get! $
;$ %
}& '
void

 
SetCreatedOn

	 
(

 
DateTimeOffset

 $
dateTimeOffset

% 3
)

3 4
;

4 5
void 
SetModifiedOn	 
( 
DateTimeOffset %
dateTimeOffset& 4
)4 5
;5 6
} â
IC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Common\Domain\ITypeHelperService.cs
	namespace 	
SJI3
 
. 
Core 
. 
Common 
. 
Domain !
;! "
public 
	interface 
ITypeHelperService #
{ 
bool 
TypeHasProperties	 
< 
T 
> 
( 
string $
fields% +
)+ ,
;, -
bool		 
TypeHasProperty			 
<		 
T		 
>		 
(		 
string		 "
orderBy		# *
)		* +
;		+ ,
}

 
public 
class 
TypeHelperService 
:  
ITypeHelperService! 3
{ 
public 

bool 
TypeHasProperties !
<! "
T" #
># $
($ %
string% +
fields, 2
)2 3
{ 
if 

( 
string 
. 
IsNullOrWhiteSpace %
(% &
fields& ,
), -
)- .
{ 	
return 
true 
; 
} 	
var 
fieldsAfterSplit 
= 
fields %
.% &
Split& +
(+ ,
$char, /
)/ 0
;0 1
foreach 
( 
var 
field 
in 
fieldsAfterSplit .
). /
{ 	
var 
propertyName 
= 
field $
.$ %
Trim% )
() *
)* +
;+ ,
var 
propertyInfo 
= 
typeof %
(% &
T& '
)' (
. 
GetProperty 
( 
propertyName )
,) *
BindingFlags+ 7
.7 8

IgnoreCase8 B
|C D
BindingFlagsE Q
.Q R
PublicR X
|Y Z
BindingFlags[ g
.g h
Instanceh p
)p q
;q r
if 
( 
propertyInfo 
== 
null  $
)$ %
{ 
return   
false   
;   
}!! 
}"" 	
return$$ 
true$$ 
;$$ 
}%% 
public'' 

bool'' 
TypeHasProperty'' 
<''  
T''  !
>''! "
(''" #
string''# )
orderBy''* 1
)''1 2
{(( 
if)) 

()) 
string)) 
.)) 
IsNullOrWhiteSpace)) %
())% &
orderBy))& -
)))- .
))). /
{** 	
return++ 
true++ 
;++ 
},, 	
var.. 
orderByAfterSplit.. 
=.. 
orderBy..  '
...' (
Split..( -
(..- .
$char... 1
)..1 2
;..2 3
var00 
propertyName00 
=00 
orderByAfterSplit00 ,
[00, -
$num00- .
]00. /
.00/ 0
Trim000 4
(004 5
)005 6
;006 7
var22 
propertyInfo22 
=22 
typeof22 !
(22! "
T22" #
)22# $
.33 
GetProperty33 
(33 
propertyName33 %
,33% &
BindingFlags33' 3
.333 4

IgnoreCase334 >
|33? @
BindingFlags33A M
.33M N
Public33N T
|33U V
BindingFlags33W c
.33c d
Instance33d l
)33l m
;33m n
if55 

(55 
propertyInfo55 
==55 
null55  
)55  !
{66 	
return77 
false77 
;77 
}88 	
return:: 
true:: 
;:: 
};; 
}<< %
@C:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Common\Domain\PagedList.cs
	namespace 	
SJI3
 
. 
Core 
. 
Common 
. 
Domain !
;! "
public 
class 
	PagedList 
< 
TEntity 
> 
:  !
List" &
<& '
TEntity' .
>. /
{		 
public

 

int

 
CurrentPage

 
{

 
get

  
;

  !
}

" #
public 

int 

TotalPages 
{ 
get 
;  
}! "
public 

int 
PageSize 
{ 
get 
; 
}  
public 

int 

TotalCount 
{ 
get 
;  
}! "
public 

bool 
HasPrevious 
=> 
CurrentPage *
>+ ,
$num- .
;. /
public 

bool 
HasNext 
=> 
CurrentPage &
<' (

TotalPages) 3
;3 4
private 
	PagedList 
( 
IEnumerable !
<! "
TEntity" )
>) *
items+ 0
,0 1
int2 5
count6 ;
,; <
int= @

pageNumberA K
,K L
intM P
pageSizeQ Y
)Y Z
{ 

TotalCount 
= 
count 
; 
PageSize 
= 
pageSize 
; 
CurrentPage 
= 

pageNumber  
;  !

TotalPages 
= 
( 
int 
) 
Math 
. 
Ceiling &
(& '
count' ,
/- .
(/ 0
double0 6
)6 7
pageSize7 ?
)? @
;@ A
AddRange 
( 
items 
) 
; 
} 
public 

static 
	PagedList 
< 
TEntity #
># $
Create% +
(+ ,

IQueryable, 6
<6 7
TEntity7 >
>> ?
source@ F
,F G
intH K

pageNumberL V
,V W
intX [
pageSize\ d
,d e

Expressionf p
<p q
Funcq u
<u v
TEntityv }
,} ~
bool	 
>
 
>
 
filter
 
=
 
null
 
,
 
Func
 
<
 

IQueryable
 ¤
<
¤ ¥
TEntity
¥ ¬
>
¬ ­
,
­ ®
IOrderedQueryable
¯ À
<
À Á
TEntity
Á È
>
È É
>
É Ê
orderBy
Ë Ò
=
Ó Ô
null
Õ Ù
)
Ù Ú
{ 
var 
count 
= 
source 
. 
Count  
(  !
)! "
;" #
var 
items 
= 
source 
. 
Skip 
(  
(  !

pageNumber! +
-, -
$num. /
)/ 0
*1 2
pageSize3 ;
); <
.< =
Take= A
(A B
pageSizeB J
)J K
.K L
ToListL R
(R S
)S T
;T U
return 
new 
	PagedList 
< 
TEntity $
>$ %
(% &
items& +
,+ ,
count- 2
,2 3

pageNumber4 >
,> ?
pageSize@ H
)H I
;I J
}   
public"" 

static"" 
	PagedList"" 
<"" 
TEntity"" #
>""# $
Create""% +
(""+ ,
IEnumerable"", 7
<""7 8
TEntity""8 ?
>""? @
source""A G
,""G H
int""I L

totalCount""M W
,""W X
int""Y \

pageNumber""] g
,""g h
int""i l
pageSize""m u
)""u v
{## 
return$$ 
new$$ 
	PagedList$$ 
<$$ 
TEntity$$ $
>$$$ %
($$% &
source$$& ,
,$$, -

totalCount$$. 8
,$$8 9

pageNumber$$: D
,$$D E
pageSize$$F N
)$$N O
;$$O P
}%% 
}&& Ä	
SC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Common\Domain\PaginationResourceParameters.cs
	namespace 	
SJI3
 
. 
Core 
. 
Common 
. 
Domain !
;! "
public 
abstract 
class (
PaginationResourceParameters 2
{ 
private 
const 
int 
MaxPageSize !
=" #
$num$ &
;& '
public 

int 

PageNumber 
{ 
get 
;  
set! $
;$ %
}& '
=( )
$num* +
;+ ,
private 
int 
	_pageSize 
= 
$num 
; 
public		 

int		 
PageSize		 
{

 
get 
=> 
	_pageSize 
; 
set 
=> 
	_pageSize 
= 
( 
value !
>" #
MaxPageSize$ /
)/ 0
?1 2
MaxPageSize3 >
:? @
valueA F
;F G
} 
} Ð'
PC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Common\Extensions\IEnumerableExtensions.cs
	namespace 	
SJI3
 
. 
Core 
. 
Common 
. 

Extensions %
;% &
public 
static 
class  
EnumerableExtensions (
{		 
public

 

static

 
IEnumerable

 
<

 
ExpandoObject

 +
>

+ ,
	ShapeData

- 6
<

6 7
TSource

7 >
>

> ?
(

? @
this

@ D
IEnumerable

E P
<

P Q
TSource

Q X
>

X Y
source

Z `
,

` a
string

b h
fields

i o
)

o p
{ 
if 

( 
source 
== 
null 
) 
{ 	
throw 
new !
ArgumentNullException +
(+ ,
nameof, 2
(2 3
source3 9
)9 :
): ;
;; <
} 	
var 
expandoObjectList 
= 
new  #
List$ (
<( )
ExpandoObject) 6
>6 7
(7 8
)8 9
;9 :
var 
propertyInfoList 
= 
new "
List# '
<' (
PropertyInfo( 4
>4 5
(5 6
)6 7
;7 8
if 

( 
string 
. 
IsNullOrWhiteSpace %
(% &
fields& ,
), -
)- .
{ 	
var 
propertyInfos 
= 
typeof  &
(& '
TSource' .
). /
./ 0
GetProperties0 =
(= >
BindingFlags> J
.J K
PublicK Q
|R S
BindingFlagsT `
.` a
Instancea i
)i j
;j k
propertyInfoList 
. 
AddRange %
(% &
propertyInfos& 3
)3 4
;4 5
} 	
else 
{ 	
var 
fieldsAfterSplit  
=! "
fields# )
.) *
Split* /
(/ 0
$char0 3
)3 4
;4 5
foreach 
( 
var 
field 
in !
fieldsAfterSplit" 2
)2 3
{   
var!! 
propertyName!!  
=!!! "
field!!# (
.!!( )
Trim!!) -
(!!- .
)!!. /
;!!/ 0
var## 
propertyInfo##  
=##! "
typeof### )
(##) *
TSource##* 1
)##1 2
.$$ 
GetProperty$$  
($$  !
propertyName$$! -
,$$- .
BindingFlags$$/ ;
.$$; <

IgnoreCase$$< F
|$$G H
BindingFlags$$I U
.$$U V
Public$$V \
|$$] ^
BindingFlags$$_ k
.$$k l
Instance$$l t
)$$t u
;$$u v
if&& 
(&& 
propertyInfo&&  
==&&! #
null&&$ (
)&&( )
{'' 
throw(( 
new(( 
ArgumentException(( /
(((/ 0
$"((0 2
$str((2 ;
{((; <
propertyName((< H
}((H I
$str((I Z
{((Z [
typeof(([ a
(((a b
TSource((b i
)((i j
}((j k
"((k l
)((l m
;((m n
})) 
propertyInfoList++  
.++  !
Add++! $
(++$ %
propertyInfo++% 1
)++1 2
;++2 3
},, 
}-- 	
foreach// 
(// 
TSource// 
sourceObject// %
in//& (
source//) /
)/// 0
{00 	
var11 
dataShapedObject11  
=11! "
new11# &
ExpandoObject11' 4
(114 5
)115 6
;116 7
foreach33 
(33 
var33 
propertyInfo33 %
in33& (
propertyInfoList33) 9
)339 :
{44 
var55 
propertyValue55 !
=55" #
propertyInfo55$ 0
.550 1
GetValue551 9
(559 :
sourceObject55: F
)55F G
;55G H
(77 
(77 
IDictionary77 
<77 
string77 $
,77$ %
object77& ,
>77, -
)77- .
dataShapedObject77. >
)77> ?
.77? @
Add77@ C
(77C D
propertyInfo77D P
.77P Q
Name77Q U
,77U V
propertyValue77W d
)77d e
;77e f
}88 
expandoObjectList:: 
.:: 
Add:: !
(::! "
dataShapedObject::" 2
)::2 3
;::3 4
};; 	
return== 
expandoObjectList==  
;==  !
}>> 
}?? 
KC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Common\Extensions\StringExtensions.cs
	namespace 	
SJI3
 
. 
Core 
. 
Common 
. 

Extensions %
;% &
public 
static 
class 
StringExtensions $
{ 
public		 

static		 
IEnumerable		 
<		 
T		 
>		  #
ParseStringToCollection		! 8
<		8 9
T		9 :
>		: ;
(		; <
this		< @
string		A G
value		H M
)		M N
{

 
return &
TryParseStringToCollection )
<) *
T* +
>+ ,
(, -
value- 2
,2 3
out4 7
var8 ;
result< B
)B C
?D E
resultF L
:M N
ArrayO T
.T U
EmptyU Z
<Z [
T[ \
>\ ]
(] ^
)^ _
;_ `
} 
private 
static 
bool &
TryParseStringToCollection 2
<2 3
T3 4
>4 5
(5 6
string6 <
value= B
,B C
outD G
IEnumerableH S
<S T
TT U
>U V
resultW ]
)] ^
{ 
try 
{ 	
var 

collection 
= 
JsonSerializer +
.+ ,
Deserialize, 7
<7 8
T8 9
[9 :
]: ;
>; <
(< =
value= B
,B C
newD G!
JsonSerializerOptionsH ]
(] ^
)^ _
)_ `
;` a
result 
= 

collection 
;  
return 
true 
; 
} 	
catch 
( 
	Exception 
) 
{ 	
result 
= 
default 
; 
return 
false 
; 
} 	
} 
} 	
@C:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Common\Infra\IAppLogger.cs
	namespace 	
SJI3
 
. 
Core 
. 
Common 
. 
Infra  
;  !
public 
	interface 

IAppLogger 
< 
T 
> 
{ 
void 
LogInformation	 
( 
string 
message &
,& '
params( .
object/ 5
[5 6
]6 7
args8 <
)< =
;= >
void 

LogWarning	 
( 
	Exception 
	exception '
,' (
string) /
message0 7
,7 8
params9 ?
object@ F
[F G
]G H
argsI M
)M N
;N O
void		 
LogError			 
(		 
	Exception		 
	exception		 %
,		% &
string		' -
message		. 5
,		5 6
params		7 =
object		> D
[		D E
]		E F
args		G K
)		K L
;		L M
}

 È
HC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Common\Infra\IGenericRepository.cs
	namespace 	
SJI3
 
. 
Core 
. 
Common 
. 
Infra  
;  !
public 
	interface 
IGenericRepository #
<# $
T$ %
,% &
in' )
TKey* .
>. /
where0 5
T6 7
:8 9
Entity: @
<@ A
TKeyA E
>E F
{		 

IQueryable

 
<

 
T

 
>

 
Query

 
(

 
)

 
;

 
Task 
< 	
T	 

>
 
GetByIdAsync 
( 
TKey 
id  
)  !
;! "
Task 
< 	
IReadOnlyList	 
< 
T 
> 
> 
ListAllAsync '
(' (
)( )
;) *
Task 
AddAsync	 
( 
T 
entity 
) 
; 
void 
AddRangeAsync	 
( 
List 
< 
T 
> 
entities '
)' (
;( )
void 
Update	 
( 
T 
entity 
) 
; 
void 
UpdateRange	 
( 
List 
< 
T 
> 
entities %
)% &
;& '
void 
Delete	 
( 
T 
entity 
) 
; 
} Þ
@C:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Common\Infra\ITaskQueue.cs
	namespace 	
SJI3
 
. 
Core 
. 
Common 
. 
Infra  
;  !
public 
	interface 

ITaskQueue 
< 
T 
> 
{ 
	ValueTask		 
QueueWorkItemAsync		  
(		  !
Func		! %
<		% &
CancellationToken		& 7
,		7 8
	ValueTask		9 B
<		B C
T		C D
>		D E
>		E F
workItem		G O
)		O P
;		P Q
	ValueTask 
< 
Func 
< 
CancellationToken $
,$ %
	ValueTask& /
</ 0
T0 1
>1 2
>2 3
>3 4
DequeueAsync5 A
(A B
CancellationToken 
cancellationToken +
)+ ,
;, -
} ¬
AC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Common\Infra\IUnitOfWork.cs
	namespace 	
SJI3
 
. 
Core 
. 
Common 
. 
Infra  
;  !
public 
	interface 
IUnitOfWork 
{ 
IGenericRepository		 
<		 
TEntity		 
,		 
TKey		  $
>		$ %

Repository		& 0
<		0 1
TEntity		1 8
,		8 9
TKey		: >
>		> ?
(		? @
)		@ A
where		B G
TEntity		H O
:		P Q
Entity		R X
<		X Y
TKey		Y ]
>		] ^
;		^ _
Task 
< 	
int	 
> 
CommitAsync 
( 
CancellationToken +
cancellationToken, =
=> ?
default@ G
)G H
;H I
} ð
AC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Entities\ApplicationUser.cs
	namespace 	
SJI3
 
. 
Core 
. 
Entities 
; 
public 
class 
ApplicationUser 
: 
Entity %
<% &
Guid& *
>* +
,+ ,
IAggregateRoot- ;
{		 
public

 

sealed

 
override

 
Guid

 
Id

  "
{

# $
get

% (
;

( )
	protected

* 3
set

4 7
;

7 8
}

9 :
public 

string 
UserName 
{ 
get  
;  !
private" )
set* -
;- .
}/ 0
public 

string 
Password 
{ 
get  
;  !
private" )
set* -
;- .
}/ 0
private 
List 
< 
Guid 
> 
TaskUnitsPrivate '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
=6 7
new8 ;
(; <
)< =
;= >
public 

IReadOnlyCollection 
< 
Guid #
># $
	TaskUnits% .
=>/ 1
TaskUnitsPrivate2 B
.B C

AsReadOnlyC M
(M N
)N O
;O P
public 

ApplicationUser 
( 
Guid 
id  "
," #
string$ *
userName+ 3
,3 4
string5 ;
password< D
)D E
:F G
thisH L
(L M
)M N
{ 
Id 

= 
id 
; 
UserName 
= 
userName 
; 
Password 
= 
password 
; 
} 
	protected 
ApplicationUser 
( 
) 
{ 
} 
} Î$
:C:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Entities\TaskUnit.cs
	namespace 	
SJI3
 
. 
Core 
. 
Entities 
; 
public 
class 
TaskUnit 
: 
Entity 
< 
Guid #
># $
,$ %
IAudit& ,
{		 
public

 

sealed

 
override

 
Guid

 
Id

  "
{

# $
get

% (
;

( )
	protected

* 3
set

4 7
;

7 8
}

9 :
public 

string 
Moniker 
{ 
get 
;  
private! (
set) ,
;, -
}. /
public 

LocalDateTime 
? 
FromDateTime &
{' (
get) ,
;, -
private. 5
set6 9
;9 :
}; <
public 

LocalDateTime 
? 

ToDateTime $
{% &
get' *
;* +
private, 3
set4 7
;7 8
}9 :
public 

int 
TaskUnitTypeId 
{ 
get  #
;# $
private% ,
set- 0
;0 1
}2 3
public 

int 
TaskUnitStatusId 
{  !
get" %
;% &
private' .
set/ 2
;2 3
}4 5
public 

Guid 
ApplicationUserId !
{" #
get$ '
;' (
private) 0
set1 4
;4 5
}6 7
public 

TaskUnit 
( 
Guid 
id 
, 
string #
moniker$ +
,+ ,
LocalDateTime- :
?: ;
fromDateTime< H
,H I
LocalDateTimeJ W
?W X

toDateTimeY c
,c d
inte h
taskUnitTypeIdi w
,w x
inty |
taskUnitStatusId	} 
,
 
Guid
 
applicationUserId
 ¥
)
¥ ¦
:
§ ¨
this
© ­
(
­ ®
)
® ¯
{ 
Id 

= 
id 
; 
Moniker 
= 
moniker 
; 
FromDateTime 
= 
fromDateTime #
;# $

ToDateTime 
= 

toDateTime 
;  
TaskUnitTypeId 
= 
taskUnitTypeId '
;' (
TaskUnitStatusId 
= 
taskUnitStatusId +
;+ ,
ApplicationUserId 
= 
applicationUserId -
;- .
} 
	protected 
TaskUnit 
( 
) 
{ 
} 
public!! 

void!! 

SetMoniker!! 
(!! 
string!! !
moniker!!" )
)!!) *
{"" 
Moniker## 
=## 
moniker## 
;## 
}$$ 
public&& 

void&& 
SetTaskUnitType&& 
(&&  
int&&  #
taskUnitTypeId&&$ 2
)&&2 3
{'' 
TaskUnitTypeId(( 
=(( 
taskUnitTypeId(( '
;((' (
})) 
public++ 

void++ 
SetTaskStatusType++ !
(++! "
int++" %
taskUnitStatusId++& 6
)++6 7
{,, 
TaskUnitStatusId-- 
=-- 
taskUnitStatusId-- +
;--+ ,
}.. 
public22 

DateTimeOffset22 
	CreatedOn22 #
{22$ %
get22& )
;22) *
private22+ 2
set223 6
;226 7
}228 9
public33 

DateTimeOffset33 
?33 

ModifiedOn33 %
{33& '
get33( +
;33+ ,
private33- 4
set335 8
;338 9
}33: ;
public55 

void55 
SetCreatedOn55 
(55 
DateTimeOffset55 +
dateTimeOffset55, :
)55: ;
{66 
	CreatedOn77 
=77 
dateTimeOffset77 "
;77" #
}88 
public:: 

void:: 
SetModifiedOn:: 
(:: 
DateTimeOffset:: ,
dateTimeOffset::- ;
)::; <
{;; 

ModifiedOn<< 
=<< 
dateTimeOffset<< #
;<<# $
}== 
}@@ 
@C:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Entities\TaskUnitStatus.cs
	namespace 	
SJI3
 
. 
Core 
. 
Entities 
; 
public 
class 
TaskUnitStatus 
: 
Enumeration )
{ 
public 

static 
readonly 
TaskUnitStatus )
TaskStatusOne* 7
=8 9
new: =
(= >
$num> ?
,? @
nameofA G
(G H
TaskStatusOneH U
)U V
)V W
;W X
public 

static 
readonly 
TaskUnitStatus )
TaskStatusTwo* 7
=8 9
new: =
(= >
$num> ?
,? @
nameofA G
(G H
TaskStatusTwoH U
)U V
)V W
;W X
public		 

static		 
readonly		 
TaskUnitStatus		 )
TaskStatusThree		* 9
=		: ;
new		< ?
(		? @
$num		@ A
,		A B
nameof		C I
(		I J
TaskStatusThree		J Y
)		Y Z
)		Z [
;		[ \
public 

TaskUnitStatus 
( 
int 
id  
,  !
string" (
name) -
)- .
: 	
base
 
( 
id 
, 
name 
) 
{ 
} 
} ±	
>C:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Entities\TaskUnitType.cs
	namespace 	
SJI3
 
. 
Core 
. 
Entities 
; 
public 
class 
TaskUnitType 
: 
Enumeration '
{ 
public 

static 
readonly 
TaskUnitType '
TypeOne( /
=0 1
new2 5
(5 6
$num6 7
,7 8
nameof9 ?
(? @
TypeOne@ G
)G H
)H I
;I J
public 

static 
readonly 
TaskUnitType '
TypeTwo( /
=0 1
new2 5
(5 6
$num6 7
,7 8
nameof9 ?
(? @
TypeTwo@ G
)G H
)H I
;I J
public

 

TaskUnitType

 
(

 
int

 
id

 
,

 
string

  &
name

' +
)

+ ,
: 	
base
 
( 
id 
, 
name 
) 
{ 
} 
} Ä
GC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\Common\MappingProfile.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
Common #
;# $
public 
record 
MappingProfile 
: 
	IRegister (
{ 
public 

void 
Register 
( 
TypeAdapterConfig *
config+ 1
)1 2
{		 
config

 
.

 
	NewConfig

 
(

 
typeof

 
(

  
	PagedList

  )
<

) *
>

* +
)

+ ,
,

, -
typeof

. 4
(

4 5
PaginationMetadata

5 G
)

G H
)

H I
;

I J
} 
} ò	
KC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\Common\PaginationMetadata.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
Common #
;# $
public 
class 
PaginationMetadata 
{ 
public 

int 

TotalCount 
{ 
get 
;  
init! %
;% &
}' (
public 

int 
PageSize 
{ 
get 
; 
init #
;# $
}% &
public 

int 

TotalPages 
{ 
get 
;  
init! %
;% &
}' (
public 

int 
CurrentPage 
{ 
get  
;  !
init" &
;& '
}( )
public		 

bool		 
HasNext		 
{		 
get		 
;		 
init		 #
;		# $
}		% &
public

 

bool

 
HasPrevious

 
{

 
get

 !
;

! "
init

# '
;

' (
}

) *
} ½
MC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Exists\IRepository.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Exists& ,
;, -
public 
	interface 
IRepository 
: 
IGenericRepository 1
<1 2
Entities2 :
.: ;
TaskUnit; C
,C D
GuidE I
>I J
{ 
Task		 
<		 	
bool			 
>		 
Exists		 
(		 
Guid		 
id		 
)		 
;		 
}

 
VC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Exists\ITaskUnitExistsQuery.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Exists& ,
;, -
public 
	interface  
ITaskUnitExistsQuery %
{ 
Guid 
Id	 
{ 
get 
; 
set 
; 
} 
} û
XC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Exists\TaskUnitExistsConsumer.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Exists& ,
;, -
public 
class "
TaskUnitExistsConsumer #
:$ %
	IConsumer& /
</ 0 
ITaskUnitExistsQuery0 D
>D E
{ 
private 
readonly 
IRepository  
_repository! ,
;, -
public

 
"
TaskUnitExistsConsumer

 !
(

! "
IRepository

" -

repository

. 8
)

8 9
{ 
_repository 
= 

repository  
;  !
} 
public 

async 
Task 
Consume 
( 
ConsumeContext ,
<, - 
ITaskUnitExistsQuery- A
>A B
contextC J
)J K
{ 
await 
context 
. 
RespondAsync "
(" #
new# &"
TaskUnitExistsResponse' =
{ 	
Exists 
= 
await 
_repository &
.& '
Exists' -
(- .
context. 5
.5 6
Message6 =
.= >
Id> @
)@ A
} 	
)	 

;
 
} 
} 
XC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Exists\TaskUnitExistsResponse.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Exists& ,
;, -
public 
class "
TaskUnitExistsResponse #
{ 
public 

bool 
Exists 
{ 
get 
; 
init "
;" #
}$ %
} Ï
SC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Get\GetTaskUnitsConsumer.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Get& )
;) *
public		 
class		  
GetTaskUnitsConsumer		 !
:		" #
	IConsumer		$ -
<		- .
IGetTaskUnitsQuery		. @
>		@ A
{

 
private 
readonly 
IRepository  
_repository! ,
;, -
private 
readonly 
IMapper 
_mapper $
;$ %
public 
 
GetTaskUnitsConsumer 
(  
IRepository  +

repository, 6
,6 7
IMapper8 ?
mapper@ F
)F G
{ 
_repository 
= 

repository  
;  !
_mapper 
= 
mapper 
; 
} 
public 

async 
Task 
Consume 
( 
ConsumeContext ,
<, -
IGetTaskUnitsQuery- ?
>? @
contextA H
)H I
{ 
var 
	pagedList 
= 
_repository #
.# $
Get$ '
(' (
context( /
./ 0
Message0 7
.7 8
ResourceParameters8 J
)J K
;K L
await 
context 
. 
RespondAsync "
(" #
new# & 
GetTaskUnitsResponse' ;
{ 	
	TaskUnits 
= 
_mapper 
.  
Map  #
<# $
IEnumerable$ /
</ 0
TaskUnitModel0 =
>= >
>> ?
(? @
	pagedList@ I
)I J
,J K
PaginationMetadata 
=  
_mapper! (
.( )
Map) ,
<, -
PaginationMetadata- ?
>? @
(@ A
	pagedListA J
)J K
} 	
)	 

;
 
} 
} Ø
YC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Get\GetTaskUnitsQueryValidator.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Get& )
;) *
public 
class &
GetTaskUnitsQueryValidator '
:( )
AbstractValidator* ;
<; <
IGetTaskUnitsQuery< N
>N O
{ 
public 
&
GetTaskUnitsQueryValidator %
(% &
ITypeHelperService& 8
typeHelperService9 J
)J K
{		 
RuleFor

 
(

 
i

 
=>

 
i

 
.

 
ResourceParameters

 )
)

) *
. 
SetValidator 
( 
new '
ResourceParametersValidator 9
(9 :
typeHelperService: K
)K L
)L M
;M N
} 
} 
public 
class '
ResourceParametersValidator (
:) *
AbstractValidator+ <
<< =
ResourceParameters= O
>O P
{ 
public 
'
ResourceParametersValidator &
(& '
ITypeHelperService' 9
typeHelperService: K
)K L
{ 
RuleFor 
( 
i 
=> 
i 
. 
Fields 
) 
. 
Custom 
( 
( 
fields 
, 
context $
)$ %
=>& (
{ 
if 
( 
! 
typeHelperService &
.& '
TypeHasProperties' 8
<8 9
TaskUnitModel9 F
>F G
(G H
fieldsH N
)N O
)O P
{ 
context 
. 

AddFailure &
(& '
$"' )
$str) *
{* +
fields+ 1
}1 2
$str2 g
"g h
)h i
;i j
} 
} 
) 
; 
} 
} 
SC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Get\GetTaskUnitsResponse.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Get& )
;) *
public 
record  
GetTaskUnitsResponse "
{ 
public 

PaginationMetadata 
PaginationMetadata 0
{1 2
get3 6
;6 7
init8 <
;< =
}> ?
public		 

IEnumerable		 
<		 
TaskUnitModel		 $
>		$ %
	TaskUnits		& /
{		0 1
get		2 5
;		5 6
init		7 ;
;		; <
}		= >
}

 
QC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Get\IGetTaskUnitsQuery.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Get& )
;) *
public 
	interface 
IGetTaskUnitsQuery #
{ 
ResourceParameters 
ResourceParameters )
{* +
get, /
;/ 0
set1 4
;4 5
}6 7
} ø
JC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Get\IRepository.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Get& )
;) *
public 
	interface 
IRepository 
: 
IGenericRepository 1
<1 2
Entities2 :
.: ;
TaskUnit; C
,C D
GuidE I
>I J
{ 
	PagedList		 
<		 
Entities		 
.		 
TaskUnit		 
>		  
Get		! $
(		$ %
ResourceParameters		% 7

parameters		8 B
)		B C
;		C D
}

 ×
MC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Get\MappingProfile.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Get& )
;) *
public 
record 
MappingProfile 
: 
	IRegister (
{ 
public		 

void		 
Register		 
(		 
TypeAdapterConfig		 *
config		+ 1
)		1 2
{

 
config 
. 
	NewConfig 
< 
Entities !
.! "
TaskUnit" *
,* +
TaskUnitModel, 9
>9 :
(: ;
); <
. 
Map 
( 
dest 
=> 
dest 
. 
Id  
,  !
src" %
=>& (
src) ,
., -
Id- /
)/ 0
. 
Map 
( 
dest 
=> 
dest 
. 
Moniker %
,% &
src' *
=>+ -
src. 1
.1 2
Moniker2 9
)9 :
. 
Map 
( 
dest 
=> 
dest 
. 
FromDateTime *
,* +
src, /
=>0 2
src3 6
.6 7
FromDateTime7 C
)C D
. 
Map 
( 
dest 
=> 
dest 
. 

ToDateTime (
,( )
src* -
=>. 0
src1 4
.4 5

ToDateTime5 ?
)? @
. 
Map 
( 
dest 
=> 
dest 
. 
TaskUnitType *
,* +
src, /
=>0 2
Enumeration3 >
.> ?
	FromValue? H
<H I
TaskUnitTypeI U
>U V
(V W
srcW Z
.Z [
TaskUnitTypeId[ i
)i j
)j k
. 
Map 
( 
dest 
=> 
dest 
. 
TaskUnitStatus ,
,, -
src. 1
=>2 4
Enumeration5 @
.@ A
	FromValueA J
<J K
TaskUnitStatusK Y
>Y Z
(Z [
src[ ^
.^ _
TaskUnitStatusId_ o
)o p
)p q
;q r
} 
} Ñ	
QC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Get\ResourceParameters.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Get& )
;) *
public 
class 
ResourceParameters 
:  !(
PaginationResourceParameters" >
{ 
public 

string 
OrderBy 
{ 
get 
;  
set! $
;$ %
}& '
=( )
$str* <
;< =
public 

string 
Fields 
{ 
get 
; 
set  #
;# $
}% &
=' (
$str) +
;+ ,
public		 

string		 
Start		 
{		 
get		 
;		 
set		 "
;		" #
}		$ %
=		& '
$str		( *
;		* +
public

 

string

 
End

 
{

 
get

 
;

 
set

  
;

  !
}

" #
=

$ %
$str

& (
;

( )
} §

LC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Get\TaskUnitModel.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Get& )
;) *
public 
record 
TaskUnitModel 
{ 
public 

Guid 
Id 
{ 
get 
; 
set 
; 
}  
public		 

string		 
Moniker		 
{		 
get		 
;		  
set		! $
;		$ %
}		& '
public

 

LocalDateTime

 
FromDateTime

 %
{

& '
get

( +
;

+ ,
set

- 0
;

0 1
}

2 3
public 

LocalDateTime 

ToDateTime #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 

string 
TaskUnitType 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 

string 
TaskUnitStatus  
{! "
get# &
;& '
set( +
;+ ,
}- .
} 
UC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Post\IPostTaskUnitResponse.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Post& *
;* +
public 
	interface !
IPostTaskUnitResponse &
{ 
bool 
IsAdded	 
{ 
get 
; 
set 
; 
} 
} ï
NC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Post\MappingProfile.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Post& *
;* +
public 
class 
MappingProfile 
: 
	IRegister '
{ 
public 

void 
Register 
( 
TypeAdapterConfig *
config+ 1
)1 2
{		 
config

 
.

 
	NewConfig

 
<

 
PostTaskUnitCommand

 ,
,

, -
Entities

. 6
.

6 7
TaskUnit

7 ?
>

? @
(

@ A
)

A B
. 
IgnoreNonMapped 
( 
true !
)! "
. 
ConstructUsing 
( 
src 
=>  "
new# &
Entities' /
./ 0
TaskUnit0 8
(8 9
src 
. 
Id 
, 
src 
. 
Moniker 
,  
src 
. 
FromDateTime $
,$ %
src 
. 

ToDateTime "
," #
src 
. 
TaskUnitTypeId &
,& '
TaskUnitStatus "
." #
TaskStatusOne# 0
.0 1
Id1 3
,3 4
src 
. 
ApplicationUserId )
) 
) 
; 
} 
} Ò

SC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Post\PostTaskUnitCommand.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Post& *
;* +
public 
class 
PostTaskUnitCommand  
{ 
public 

Guid 
Id 
{ 
get 
; 
set 
; 
}  
public		 

string		 
Moniker		 
{		 
get		 
;		  
set		! $
;		$ %
}		& '
public

 

int

 
TaskUnitTypeId

 
{

 
get

  #
;

# $
set

% (
;

( )
}

* +
public 

LocalDateTime 
? 
FromDateTime &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
public 

LocalDateTime 
? 

ToDateTime $
{% &
get' *
;* +
set, /
;/ 0
}1 2
public 

Guid 
ApplicationUserId !
{" #
get$ '
;' (
set) ,
;, -
}. /
} Ä
TC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Post\PostTaskUnitConsumer.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Post& *
;* +
public		 
class		  
PostTaskUnitConsumer		 !
:		" #
	IConsumer		$ -
<		- .
PostTaskUnitCommand		. A
>		A B
{

 
private 
readonly 
IMapper 
_mapper $
;$ %
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly 

ITaskQueue 
<  
Guid  $
>$ %

_taskQueue& 0
;0 1
public 
 
PostTaskUnitConsumer 
(  
IUnitOfWork  +

unitOfWork, 6
,6 7
IMapper8 ?
mapper@ F
,F G

ITaskQueueH R
<R S
GuidS W
>W X
	taskQueueY b
)b c
{ 
_mapper 
= 
mapper 
; 
_unitOfWork 
= 

unitOfWork  
;  !

_taskQueue 
= 
	taskQueue 
; 
} 
public 

async 
Task 
Consume 
( 
ConsumeContext ,
<, -
PostTaskUnitCommand- @
>@ A
contextB I
)I J
{ 
var 
taskUnit 
= 
_mapper 
. 
Map "
<" #
PostTaskUnitCommand# 6
,6 7
Entities8 @
.@ A
TaskUnitA I
>I J
(J K
contextK R
.R S
MessageS Z
)Z [
;[ \
await 
_unitOfWork 
. 

Repository $
<$ %
Entities% -
.- .
TaskUnit. 6
,6 7
Guid8 <
>< =
(= >
)> ?
.? @
AddAsync@ H
(H I
taskUnitI Q
)Q R
;R S
if 

( 
await 
_unitOfWork 
. 
CommitAsync )
() *
)* +
>, -
$num. /
)/ 0
{ 	
await 
context 
. 
RespondAsync &
<& '!
IPostTaskUnitResponse' <
>< =
(= >
new> A
{ 
IsAdded 
= 
true 
}   
)   
;   
await"" 

_taskQueue"" 
."" 
QueueWorkItemAsync"" /
(""/ 0
_""0 1
=>""2 4
new""5 8
	ValueTask""9 B
<""B C
Guid""C G
>""G H
(""H I
taskUnit""I Q
.""Q R
Id""R T
)""T U
)""U V
;""V W
}## 	
else$$ 
{%% 	
await&& 
context&& 
.&& 
RespondAsync&& &
<&&& '!
IPostTaskUnitResponse&&' <
>&&< =
(&&= >
new&&> A
{&&B C
IsAdded&&D K
=&&L M
false&&N S
}&&T U
)&&U V
;&&V W
}'' 	
}(( 
})) 
SC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Put\IPutTaskUnitResponse.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Put& )
;) *
public 
	interface  
IPutTaskUnitResponse %
{ 
bool 
	IsUpdated	 
{ 
get 
; 
set 
; 
}  
} ð
JC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Put\IRepository.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Put& )
;) *
public 
	interface 
IRepository 
: 
IGenericRepository 1
<1 2
Entities2 :
.: ;
TaskUnit; C
,C D
GuidE I
>I J
{ 
Task		 
<		 	
bool			 
>		 
UpdateTaskStatus		 
(		  
Entities		  (
.		( )
TaskUnit		) 1
taskUnit		2 :
)		: ;
;		; <
}

 	
MC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Put\MappingProfile.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Put& )
;) *
public 
record 
MappingProfile 
: 
	IRegister (
{ 
public		 

void		 
Register		 
(		 
TypeAdapterConfig		 *
config		+ 1
)		1 2
{

 
config 
. 
	NewConfig 
< 
PutTaskUnitCommand +
,+ ,
Entities- 5
.5 6
TaskUnit6 >
>> ?
(? @
)@ A
. 
Map 
( 
src 
=> 
src 
. 
TaskUnitStatusId ,
,, -
dest. 2
=>3 5
dest6 :
.: ;
TaskUnitStatusId; K
)K L
. 
IgnoreNonMapped 
( 
true !
)! "
;" #
} 
} ¨
QC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Put\PutTaskUnitCommand.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Put& )
;) *
public 
class 
PutTaskUnitCommand 
{ 
public 

Guid 
Id 
{ 
get 
; 
set 
; 
}  
public 

int 
TaskUnitStatusId 
{  !
get" %
;% &
set' *
;* +
}, -
}		 Í
RC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Features\TaskUnit\Put\PutTaskUnitConsumer.cs
	namespace 	
SJI3
 
. 
Core 
. 
Features 
. 
TaskUnit %
.% &
Put& )
{ 
public		 

class		 
PutTaskUnitConsumer		 $
:		% &
	IConsumer		' 0
<		0 1
PutTaskUnitCommand		1 C
>		C D
{

 
private 
readonly 
IUnitOfWork $
_unitOfWork% 0
;0 1
private 
readonly 
IRepository $
_repository% 0
;0 1
private 
readonly 
IMapper  
_mapper! (
;( )
public 
PutTaskUnitConsumer "
(" #
IUnitOfWork# .

unitOfWork/ 9
,9 :
IRepository; F

repositoryG Q
,Q R
IMapperS Z
mapper[ a
)a b
{ 	
_unitOfWork 
= 

unitOfWork $
;$ %
_repository 
= 

repository $
;$ %
_mapper 
= 
mapper 
; 
} 	
public 
async 
Task 
Consume !
(! "
ConsumeContext" 0
<0 1
PutTaskUnitCommand1 C
>C D
contextE L
)L M
{ 	
var 
taskUnit 
= 
await  
_unitOfWork! ,
., -

Repository- 7
<7 8
Entities8 @
.@ A
TaskUnitA I
,I J
GuidK O
>O P
(P Q
)Q R
.R S
GetByIdAsyncS _
(_ `
context` g
.g h
Messageh o
.o p
Idp r
)r s
;s t
_mapper 
. 
Map 
( 
context 
.  
Message  '
,' (
taskUnit) 1
)1 2
;2 3
await 
context 
. 
RespondAsync &
<& ' 
IPutTaskUnitResponse' ;
>; <
(< =
new= @
{ 
	IsUpdated 
= 
await !
_repository" -
.- .
UpdateTaskStatus. >
(> ?
taskUnit? G
)G H
} 
) 
; 
} 	
}   
}!! 
OC:\Users\fiyaz\Desktop\SJI3\SJI3.Core\Services\Domain\ITaskProcessingService.cs
	namespace 	
SJI3
 
. 
Core 
. 
Services 
. 
Domain #
;# $
public 
	interface "
ITaskProcessingService '
{ 
Task		 
ProcessTask			 
(		 
Guid		 
taskId		  
,		  !
CancellationToken		" 3
stoppingToken		4 A
)		A B
;		B C
}

 